@page "/TrainingExercises"
@using Models
@using Services
@inject CategoriesService _categoriesService
@inject ExerciseAddedToLogService _exerciseAddedService
@inject TrainingLogService _trainingLogService
@inject NavigationManager _navigationManager;
<PageTitle>Træningsøvelser</PageTitle>
<AuthorizeView>
    <Authorized>

<h3>TrainingExercises</h3>


<h3>Categories</h3>
<h1>@ErrorMsg</h1>
<div class="row container-fluid">
    @if (categories != null)
    {
        @foreach (var category in categories)
        {
            <div>
                <button class="btn btn-secondary m-2" @onclick="() => ToggleCategoryVisibility(category)">
                    @if (category.Visible)
                    {
                        <span>Hide @category.CategoryName</span>
                    }
                    else
                    {
                        <span>Show @category.CategoryName</span>
                    }
                </button>
            </div>

            @if (category.Visible)
            {
                <div class="row">
                    @foreach (var exercise in category.Exercises)
                    {
                        <div class="col-md-3 mb-3">
                            <div class="card border border-info rounded">
                                <div class="card-body">
                                    <h5 class="card-title">@exercise.Name</h5>
                                    <p class="card-text">@exercise.Description</p>
                                </div>
                                <div class="card-body">
                                    <button @onclick="() => ShowForm(exercise)" class="btn-primary btn-outline-primary">Add to exercises</button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        }
    }
</div>

@if (showForm)
{
    <div class="row">
        <div class="form-group">
            <div class="col">
                <label for="sets">Sets:</label>
                <input type="number" @bind="sets" placeholder="Sets">
            </div>
            <div class="col">
                <label for="weight">Weight</label>
                <input type="number" @bind="weight" placeholder="Weight">
            </div>
            <div class="col">
                <label for="repetitions">Repetitioner</label>
                <input type="number" @bind="repetitions" placeholder="Repetitions">
            </div>

            <button style="margin: 1px;" class="btn-primary" @onclick="AddExerciseToLog">Tilføj Til Log</button>
        </div>
    </div>
}
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized to view this content!</p>
    </NotAuthorized>
</AuthorizeView>









@code {
    private int latestTrainingLogId;
    private int sets;
    private int weight;
    private int repetitions;
    private bool showForm = false;
    private TrainingExercises selectedExercise;
    private TrainingLog trainingLog = new TrainingLog();
    List<Categories> categories;
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }
    string ErrorMsg = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        var AuthState = await authenticationStateTask;
        var user = AuthState.User;
        if (user.Identity != null)
        {
            if (!user.Identity.IsAuthenticated)
            {
                _navigationManager.NavigateTo("Identity/Account/Login"); /// If user isnt authenticated then user gets naviated to the login page
            }
        }
        await GetAllCategoriesWithExercises();

        try
        {
            await GetTrainingLogById(latestTrainingLogId);
        }
        catch (Exception)
        {

            throw;
        }

        try
        {
            await GetLatestTrainingLogId();
        }
        catch (Exception)
        {

            throw;
        }
    }



    public async Task GetAllCategoriesWithExercises()
    {
        try
        {
            categories = await _categoriesService.GetAllCategoriesAsync();
            /// Set initial visibility state for each category - Default Visibility state is default anyway set in the DatabaseContext.
            categories.ForEach(c => c.Visible = false);
        }
        catch (Exception e)
        {
            ErrorMsg = e.Message.ToString();
        }
    }

    public void ToggleCategoryVisibility(Categories category)
    {
        category.Visible = !category.Visible;
    }

    private void ShowForm(TrainingExercises exercise)
    {
        selectedExercise = exercise;
        showForm = true;
    }

    private void ResetForm()
    {
        sets = 0;
        weight = 0;
        repetitions = 0;
    }

    private async Task AddExerciseToLog()
    {
        TrainingExerciseAddedToLog exerciseAddedToLog = new TrainingExerciseAddedToLog
            {
                Repetitions = repetitions,
                Sets = sets,
                weight = weight,
                TrainingExerciseId = selectedExercise.Id,
                TrainingLogId = latestTrainingLogId, // Assigning the last created log.
                TrainingExercises = selectedExercise
            };

        await _exerciseAddedService.CreateExerciseAdded(exerciseAddedToLog);
        showForm = false; // Hide the form after adding the exercise
        ResetForm();
    }

    private async Task GetLatestTrainingLogId()
    {
        latestTrainingLogId = await _exerciseAddedService.GetLatestTrainingLogId();
    }

    private async Task GetTrainingLogById(int Id)
    {
        trainingLog = await _trainingLogService.GetTrainingLogById(Id);
    }

}
