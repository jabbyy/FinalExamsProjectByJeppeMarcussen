@page "/edit/{Id:int}"
@using Models
@using Codes
@inject NavigationManager _navigationManager;
@inject Repository.UserRepo _context;
@inject Services.UserProfileService _userProfileServiceContext;



<AuthorizeView Context="AuthContext">
    <Authorized>
@if (string.Equals(loggedInUserEmail, userProfileEmail, StringComparison.OrdinalIgnoreCase))
{
            

<h3>Edit your user information</h3>



<EditForm Context="EditFormContext" Model="@user" OnValidSubmit="@HandleOnValidSubmit" class="col-7 p-0">
    <div class="form-group">
        <label for="FirstName">First Name</label>
        <InputText id="FirstName" @bind-Value="@user.FirstName" class="form-control" placeholder="FirstName" />
    </div>
    <div class="form-group">
        <label for="LastName">Last Name</label>
        <InputText id="FirstName" @bind-Value="@user.LastName" class="form-control" placeholder="Last name" />
    </div>
    <div class="form-group">
        <label for="FirstName">City</label>
        <InputText id="City" @bind-Value="@user.City" class="form-control" placeholder="City" />
    </div>
    <div class="form-group">
        <label for="FirstName">Postal</label>
        <InputNumber id="Postal" @bind-Value="@user.Postal" class="form-control" placeholder="Post Nummer" />
    </div>
    <div class="form-group">
        <label for="FirstName">Age</label>
        <InputNumber id="Age" @bind-Value="@user.Age" class="form-control" placeholder="Age" />
    </div>
    <br />
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
        @if (showError)
        {
            <p style="color: red;">Et eller flere felter er tomme </p>
        }
    </div>


</EditForm>

}
else
{
     <p>You are not allowed to see this content!</p>
}
    </Authorized>
    <NotAuthorized>
       <p>You are not authorized to see this page!</p>
    </NotAuthorized>
</AuthorizeView>

@code {


    string loggedInUserEmail = string.Empty; 

    
    string userProfileEmail = string.Empty;


    public string ?Email { get; set; }
    public UserInfo ?user = new UserInfo();
    public bool showError = false;
    [Parameter]
    public int Id { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }



    protected override async Task OnInitializedAsync()
    {

        bool idExists = await _userProfileServiceContext.CheckIfIdExists(Id);
        if (idExists)
        {
            user = await _context.getSingle(Id);
            userProfileEmail = user.UserEmail;    
        }
        else
        {
            _navigationManager.NavigateTo("/MyProfile");
        }
        var userState = await authenticationStateTask;
        var email = userState.User;
        loggedInUserEmail = email.Identity.Name;
    }

    private async void HandleOnValidSubmit()
    {
        try
        {
            if (Id != null)
            {
                if (string.IsNullOrWhiteSpace(user.FirstName))
                {
                    showError = true;
                }                
                else if (string.IsNullOrWhiteSpace(user.LastName))
                {
                    showError = true;
                }         
                else if (string.IsNullOrWhiteSpace(user.City))
                {
                    showError = true;
                }           
                else if (string.IsNullOrWhiteSpace(user.Postal.ToString()))
                {
                    showError = true;
                }        
                else if (string.IsNullOrWhiteSpace(user.Age.ToString()))
                {
                    showError = true;
                }
                else
                {
                    await _userProfileServiceContext.UpdateProfile(Id, user);
                _navigationManager.NavigateTo("/MyProfile");
                    
                }
            }
        }
        catch (Exception ex)
        {
            string message = ex.Message;
        }



    }


}
