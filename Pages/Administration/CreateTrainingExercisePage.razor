@page "/CreateTrainingExercise"
@using Models
@using Services
@inject TrainingExercisesService _trainingExerciseContext
@inject CategoriesService _categoryContext
<AuthorizeView Roles="Administrator">
    <Authorized>



<h3>Opret Træningsøvelse</h3>
@if (addedSuccessfully)
{
    <p style="color: green;">Category added successfully!</p>
}
@if (showError)
{
    <p style="color: red;">Du skal vælge en kategori, indtaste navn og description for at oprette en træningsøvelse</p>
}
<div class="row">
    <div class="col-md-4">
        <form @onsubmit="CreateTrainingExercise">
            <div class="form-group">
                <label for="Name">Træningsøvelses Navn</label>
                <br />
                <input maxlength="50" type="text" id="Name" @bind="newTrainingExercise.Name" />
            </div>
            <div class="form-group">
                <label for="Description">Beskrivelse</label>

                <textarea type="text" id="Name" maxlength="160" @bind="newTrainingExercise.Description"
                          style="width: 100%; max-width: 450px; height: 100px;" />
            </div>
            <div class="form-group">

                <label for="CategoryId">Vælg Kategori</label>
                <select id="CategoryId" @bind="newTrainingExercise.CategoryId">
                        <option>Vælg En Kategori</option>
                    @foreach (var category in categories)
                    {
                        <option value="@category.Id">@category.CategoryName</option> 
                    }                                                               
                </select>                                                              
            </div>

            <button class="btn btn-primary" type="submit">Opret Træningsøvelser</button>
        </form>
        <h3>@ErrorMsg</h3>
    </div>

</div>

<div class="row">
    <div class="col-md-4">
        @if (selectedTrainingExercises != null)
        {
            <form @onsubmit="UpdateTrainingExercise">
                <div class="form-group">
                    <h3>Opdater træningsøvelse</h3>
                    <label for="categoryName">Træningøvelse Navn</label>
                    <input type="text" id="Name" @bind="selectedTrainingExercises.Name" maxlength="50" />
                    <label for="Description">Description</label>
                    <textarea type="text" id="Name" maxlength="160" @bind="selectedTrainingExercises.Description"
                              style="width: 100%; max-width: 450px; height: 100px;" />
                    <label for="CategoryId">Select Category</label>
                    <select id="CategoryId" @bind="selectedTrainingExercises.CategoryId">
                        @foreach (var category in categories)
                        {
                            <option value="@category.Id">@category.CategoryName</option> 
                        }                                                               
                    </select>
                    <button class="btn btn-primary" type="submit">Opdater Træningsøvelse</button>
                            @if (showUpdateError)
                            {
                                <p style="color: red;">Du skal vælge en kategori, indtaste navn og description for at oprette en træningsøvelse</p>
                            }
                </div>
            </form>
        }
    </div>
</div>


@if (categories != null)
{
    <h3>Alle Træningsøvelser</h3>
    <div class="row">

        <ul class="list-group ">
            @foreach (var træning in trainingExercises)
            {
                <div class="col">

                <li class="list-group-item d-inline-block">
                        @træning.Name
                    <button class="btn btn-secondary" @onclick="() => EditTrainingExercise(træning)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => DeleteTrainingExercises(træning.Id)">Delete</button>
                </li>
        </div>
            }
            </ul>
            </div>
}
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized to view this content!</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool showError = false;
    private bool showUpdateError = false;
    private bool addedSuccessfully = false;
    private string ErrorMsg = string.Empty;
    private TrainingExercises newTrainingExercise = new TrainingExercises();
    private List<Categories> categories = new List<Categories>();
    private List<TrainingExercises> trainingExercises = new List<TrainingExercises>();
    TrainingExercises? selectedTrainingExercises;


    protected override async Task OnInitializedAsync()
    {
        await GetAllCategoriesAsync();
        await GetAllTrainingExercises();
    }



    private async Task GetAllTrainingExercises()
    {
        try
        {
            trainingExercises = await _trainingExerciseContext.GetAllTrainingExercises();
        }
        catch (Exception e)
        {
            ErrorMsg = e.Message;
        }
    }

    private async Task CreateTrainingExercise()
    {
        try
        {
            if(newTrainingExercise.CategoryId > 0)
            {
                if (!string.IsNullOrWhiteSpace(newTrainingExercise.Name))
                {
                    if (!string.IsNullOrWhiteSpace(newTrainingExercise.Description))
                    {

                        await _trainingExerciseContext.AddTrainingExercise(newTrainingExercise);
                        addedSuccessfully = true;
                        await GetAllTrainingExercises();

                        //Resetting the form
                        newTrainingExercise = new TrainingExercises();    
                        if(showError == true)
                        {
                            showError = false;
                        }
                    }
                    else
                    {
                        showError = true;
                    }
                }
                else
                {
                    showError = true;
                }
            }
            else if(newTrainingExercise.CategoryId == 0)
            {
                showError = true;
            }

        }
        catch (Exception e)
        {
            ErrorMsg = e.Message;
        }
    }
    private async Task GetAllCategoriesAsync()
    {
        try
        {
            categories = await _categoryContext.GetAllCategoriesAsync();
        }
        catch (Exception e)
        {
            ErrorMsg = e.Message;
        }
    }

    private async Task UpdateTrainingExercise()
    {
        try
        {
            if (selectedTrainingExercises != null)
            {
                if (!string.IsNullOrWhiteSpace(selectedTrainingExercises.Name))
                {
                    if (!string.IsNullOrWhiteSpace(selectedTrainingExercises.Description))
                    {
                        await _trainingExerciseContext.UpdateTrainingExercise(selectedTrainingExercises);
                        selectedTrainingExercises = null;
                        if(showUpdateError == true)
                        {
                            showUpdateError = false;
                        }

                    }
                    else
                    {
                        showUpdateError = true;
                    }
                }
                else
                {
                    showUpdateError = true;
                }
            }
        }
        catch (Exception)
        {

            throw;
        }
    }

    private async Task DeleteTrainingExercises(int ExerciseId)
    {
        try
        {
            await _trainingExerciseContext.DeleteTrainingExercise(ExerciseId);
            trainingExercises = await _trainingExerciseContext.GetAllTrainingExercises();

        }
        catch (Exception)
        {

            throw;
        }

    }

    private void EditTrainingExercise(TrainingExercises trainingExercises)
    {
        selectedTrainingExercises = trainingExercises;
    }
}